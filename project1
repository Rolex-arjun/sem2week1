//Blog Data
let posts = [
  { id: 1, title: 'First Post', content: 'This is my first blog post.' },
  { id: 2, title: 'Second Post', content: 'This is my second blog post.' }
];
//create the routes
app.get('/posts', (req, res) => {
  res.json(posts);
});
//GET posts
app.get('/posts/:id', (req, res) => {
  const postId = parseInt(req.params.id);
  const post = posts.find(p => p.id === postId);

  if (!post) {
    return res.status(404).json({ message: 'Post not found' });
  }

  res.json(post);
});
//Create post
app.post('/posts', (req, res) => {
  const { title, content } = req.body;

  if (!title || !content) {
    return res.status(400).json({ message: 'Title and content are required' });
  }

  const newPost = {
    id: posts.length + 1, // Simple auto-increment ID
    title,
    content
  };

  posts.push(newPost);
  res.status(201).json(newPost);
});
//Put post
app.put('/posts/:id', (req, res) => {
  const postId = parseInt(req.params.id);
  const { title, content } = req.body;

  const post = posts.find(p => p.id === postId);

  if (!post) {
    return res.status(404).json({ message: 'Post not found' });
  }

  if (title) post.title = title;
  if (content) post.content = content;

  res.json(post);
});
//final server
const express = require('express');
const app = express();

app.use(express.json());

let posts = [
  { id: 1, title: 'First Post', content: 'This is my first blog post.' },
  { id: 2, title: 'Second Post', content: 'This is my second blog post.' }
];

// Get all posts
app.get('/posts', (req, res) => {
  res.json(posts);
});

// Get post by ID
app.get('/posts/:id', (req, res) => {
  const postId = parseInt(req.params.id);
  const post = posts.find(p => p.id === postId);

  if (!post) {
    return res.status(404).json({ message: 'Post not found' });
  }

  res.json(post);
});

// Create a new post
app.post('/posts', (req, res) => {
  const { title, content } = req.body;

  if (!title || !content) {
    return res.status(400).json({ message: 'Title and content are required' });
  }

  const newPost = {
    id: posts.length + 1,
    title,
    content
  };

  posts.push(newPost);
  res.status(201).json(newPost);
});

// Update post by ID
app.put('/posts/:id', (req, res) => {
  const postId = parseInt(req.params.id);
  const { title, content } = req.body;

  const post = posts.find(p => p.id === postId);

  if (!post) {
    return res.status(404).json({ message: 'Post not found' });
  }

  if (title) post.title = title;
  if (content) post.content = content;

  res.json(post);
});

const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

